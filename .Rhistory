q()
help.search("update")
updateR()
# installing/loading the latest installr package:
install.packages("installr"); library(installr) #load / install+load installr
updateR() # updating R.
updateR()
q()
q()
install
install.packages("KernSmooth R")
install.packages("KernSmooth")
load.package(KernSmooth)
library(KernSmooth)
q()
clr
cls
q()
## This is a markdown file
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
---
title: "Helloworld"
This is a markdown file
# This is a markdown file
# This is a markdown file
# This is a markdown file
# This is a markdown file
# This is a markdown file
# This is a markdown file
# This is a markdown file
## This is a markdown file
## This is a markdown file
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
exit
q()
set.seed(1)
rpois(5, 2)
q()
install.package("swirl")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 7+5
x
y <- x-3
y
c(1.1,9,3.14)
c(1.1, 9, 3.14)
z<-c(1.1, 9, 3.14)
z<-c(1.1,9,3.14)
?c
z
c(z, 555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
c(1, 2, 3, 4) + c(0, 10, 1000)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-wd()
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.r")
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
play()
args(file.path)
nxt()
file.path("folder1", "folder2")
?dir.creat
?dir.create
play()
getwd()
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
nxt()
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = true)
unlink("testdir2", recursive = TRUE)
setwd()
play()
ls()
old.dir
nxt()
setdir(old.dir)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
q()
args(list)
?list
?return
swirl()
library()
?source
source(swirl)
source("swirl")
package("swirl")
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=.5)
seq(5,10,length=30)
seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
length()
length(my_seq)
1:length(my_seq)
my_seq
seq(along.with=my_Seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0.1.2),each=10)
rep(c(0,1,2),each=10)
exit()
?
q()
ls()
q()
library("swirl")
ls()
rm(list=ls())
ls()
swirl()
TRUE == TRUE
(FALSE == TRUE)
(FALSE == TRUE)== FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins", "twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints>0)
sys.date()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
remiander(5)
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x) {x+1}, 6)
evaluate(function(x) {c[1]},c(8,4,0)
evaluate(function(x) {c[1]},c(8,4,0))
evaluate(function(x) {c[1]},c(8,4,0))
evaluate(function(x) {x[1]},c(8,4,0))
evaluate(function(x) {x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is","fun")
paste("Programming","is","fun!")
submit()
telegram(hello)
submit()
submit()
submit()
submit()
mad_libs(place = "London", adjective = "beautiful", noun = "dog")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flags,cum)
lapply(flags,sum)
lapply(flag_colors,sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3.4.5.5.5.6.6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
q()
ls()
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
swirl()
?InstallCourses
install_from_swirl(Getting_and_Cleaning_Data, dev = FALSE, mirror = "github")
install_from_swirl("Getting_and_Cleaning_Data", dev = FALSE, mirror = "github")
install_from_swirl("Exploratory_Data_Analysis", dev = FALSE, mirror = "github")
install_from_swirl("Data_Analysis", dev = FALSE, mirror = "github")
install_from_swirl("Overview_of_Statistics", dev = FALSE, mirror = "github")
install_from_swirl("Statistical_Inference", dev = FALSE, mirror = "github")
install_from_swirl("Regression_Models", dev = FALSE, mirror = "github")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp", dev = FALSE, mirror = "github")
swirl()
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dlplyr)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
ls()
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
save.image("C:\\Users\\Kwan\\Documents\\resume_filter.RData")
q()
load("C:\\Users\\Kwan\\Documents\\resume_filter.RData")
ls()
swirl()
library("swirl")
swirl()
filter(cran,package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version < as.numeric("3.0.2"), country == "US")
filter(cran, r_version < "3.0.2", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 && r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10)
is.na(c(3,5,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_os))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
cran3
mutate(cran3, correct_size = size +1000)
summarize(cran, ave_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
q()
ls()
rm(list=ls())
ls()
getwd()
dir()
microData <- read.table("./data/microdata.csv", sep=",", header=TRUE)
million <- microData$(VAL==24)
header(microData)
head(microData)
ls()
microData[Val==24]
!is.NA(microData[microData$VAL==24])
!is.na(microData[microData$VAL==24])
!is.na(microData$VAL[microData$VAL==24])
is.na(microData$VAL[microData$VAL==24])
sum(is.na(microData$VAL[microData$VAL==24]))
dim(microdata)
dim("microdata")
microData
dim("microData")
dim(microData)
sum(is.na(microData$VAL[microData$VAL==24]))
microData <- read.table("./data/microdata.csv", sep=",", header=TRUE)
sum(!is.na(microData$VAL[microData$VAL==24]))
!is.na(microData$VAL[microData$VAL==24]))
sum(is.na(microData$VAL[microData$VAL==24]))
sum(!is.na(microData$VAL[microData$VAL==24]))
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
date()
colindex <- 7:15
rowindex <- 18:23
dat <- read.xlsx("./data/nga.xlsx", ColIndex = colindex, RowInd = rowindex)
dat <- read.xlsx("./data/nga.xlsx", sheetIndex = 1, header = TRUE, ColIndex = colindex, RowInd = rowindex)
dat <- read.xlsx("./data/nga.xlsx", sheetIndex = 1, header = TRUE, ColIndex = colindex, RowInd = rowindex)
library(xlsx)
dat <- read.xlsx("./data/nga.xlsx", sheetIndex = 1, header = TRUE, ColIndex = colindex, RowInd = rowindex)
colIndex <- 7:15
rowIndex <- 18:23
ls()
dat <- read.xlsx("./data/nga.xlsx", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
dir()
ls("./data")
dir()
dir("./data"
dir("./data")
dir("./data")
dat <- read.xlsx("./data/nga.xlsx", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
dat <- read.xlsx("./data/nga.xlsx", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
library(data.frame)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(data.table)
ls9)
ls()
rm("colindex")
ls()
rm("rowindex")
ls()
dir()
q()
ls()
rm(ls())
rm("ls()")
ls()
getwd()
setwd("data")
getwd()
dir()
temp1 <- read.table("train/X_train.txt")
temp2 <- read.table("test/X_test.txt")
X <- rbind(temp1, temp2)
dim(X)
head()
head(X)\
head(X)
features <- read.table("features.txt")
features
indices_of_good_features <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
indices_of_good_features
X <- X[, indices_of_good_features]
x
X
head(X)
names(X) <- features[indices_of_good_features, 2]
head(X)
names(X) <- gsub("\\(|\\)", "", names(X))
head(X)
names(X) <- tolower(names(X))
head(X)
activities <- read.table("activity_labels.txt")
head(activities)
activities[, 2] = gsub("_", "", tolower(as.character(activities[, 2])))
head(activities)
temp3 <- read.table("train/y_train.txt")
temp4 <- read.table("test/y_test.txt")
Y <- rbind(temp3, temp4)
head(Y)
Y
Y[,1] = activities[Y[,1], 2]
Y
names(Y) <- "activity"
Y
head(Y)
temp5 <- read.table("train/subject_train.txt")
temp6 <- read.table("test/subject_test.txt")
S <- rbind(temp5, temp6)
head(S)
S
?names()
names(S)
names(X)
names(Y)
names(S)
names(S) <- "subject"
names(S)
S
head(S)
q()
